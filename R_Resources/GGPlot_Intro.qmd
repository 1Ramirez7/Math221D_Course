---
title: "Introducing GGPlot!"
subtitle: "A Better Way to Visualize Data"
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = TRUE)
```


# Introduction

GGPlot is a data visualization library that follows Leland Wilkinson's Grammar of Graphics.  The Grammar of Graphics is a systematic approach to how we think about connecting raw data to visual elements.  

Think about a basic sentence in English:  The boy threw the ball.  This sentence has a subject (the boy), a verb (threw), and a direct object (the ball).  While not all sentences include every part of speech, virtually all sentences have at least a subject and a verb. 

The grammar of graphics has 3 essential components of distinct graphical elements that are needed to make basic "sentences."  They are like the subjects and verbs of english sentences.  These elements are:

1. Data layer
2. Aesthetic mappings
3. Geometry layers

The data layer should be obvious.  We need to identify the data we wish to express visually.  

The Aesthetic Mapping is a description of how we map specific data elements to specific chart elements. For example, what variable in the data do we want expressed on the X axis or Y axis.  We can also map a data variable to the color element.

Lastly, the Geometry Layer tells the computer how to express those Aesthetic Mappings, such as a scatter plot, boxplot, bar chart, etc.  

As in English, we can make more complex sentences with other graphical elements, but the three mentioned above will be common to all.

This sounds more complicated than it is in practice.  So let's look at a familiar example:  the Iris data.

```{r}

library(tidyverse)
library(mosaic)
library(rio)
library(ggplot2)

head(iris)

```

# Your First ggplot

Let's plot Sepel.Length and Sepal.Width.  Two quantitative variables are well represented as a scatter plot. We use the function `ggplot()`.

The first argument in the ggplot() function is the data layer:  

```{r}
ggplot(data = iris)

```

Running this line of code by itself will open up a blank graph because we haven't told ggplot what to do with which variables columns of data.  That requires including the aesthetic mapping.  The generic code is: `ggplot(data = iris, mapping = aes())`.  We then define which columns to use for what chart elements inside the parentheses of the `aes()` argument.  

```{r}
ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width))

```

Now R makes a blank chart that has an x and a y axis.  We must tell it what kind of plot to make with that information.  The geometry layer tells R how to express the data.  

Because we want to look at a scatter plot, we add the `geom_point()` which expresses the data elements as points.  


```{r}

ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_point()

```

There are countless types of geometries to play with in R.  They all have the form `geom_`.  In fact, if you start typing `geom_` a drop-down list appears that you can scroll through and see the possibilities.  

## Adding Color

If we want to see the relationship between sepal length and width for each species, we can easily map "Species" onto the color element in the aesthetic mapping.  

Because "Species" is a data element, we put it INSIDE the `aes()`. This maps Species onto a chart element, `color`.  

```{r}

ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point()

```

If we want to specify a single color to all the points, we can include a "color" statement in the geometry layer:

```{r}

ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_point(color = "purple")

```

## More Additions

The great thing about ggplot is how easy it is to make more interesting graphs that combine many geometries or even different data layers.  For example, if I want to include a different geometry that looks at a regression line on top of the points, simply add a new geometry:

```{r}

ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point() +
  geom_smooth(method = "lm")

```

The defaults aren't always beautiful.  But chart modifications can be easily made in a fairly intuitive way.  

Without changing the underlying "grammar" we can change the "font," so to speak.  To modify the axis labels or add a title and a subtitle, use a `labs()` layer.  

```{r}

ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(
    x = "Sepal Length",
    y = "Sepal Width",
    title = "Comparing Sepal Length and Sepal Width by Species"
  )

```

There are also different "themes" you can play with that aren't related to the data but are additional elements that can enhance the impact of your visualization. 

We typically want high contrast between data points and the background.  This makes it easier to perceive differences.  Changing the theme of the chart can make lots of changes all at once.  `theme_bw()` is a useful theme which drops the gray default background.


```{r}

ggplot(iris, mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(
    x = "Sepal Length",
    y = "Sepal Width",
    title = "Comparing Sepal Length and Sepal Width by Species"
  ) +
  theme_bw()
  
```

There are more themes to try.  If you begin typing `theme_` you will see a drop down with several other themes.  

Explore some of the themes.  Who can come up with the wildest visualization?  

## Facets

Sometimes adding more things to a graph makes it too cluttered.  When dealing with multiple groups, you may want to split the graph into several panels, one for each group.

Facets allow us to split a graph up based on a variable in the data. For example, if we wanted a separate regression plot for each species, we could "add" a facet:

```{r}

ggplot(iris, mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point() +
  facet_grid(~Species) +
  geom_smooth(method = "lm") +
  labs(
    x = "Sepal Length",
    y = "Sepal Width",
    title = "Comparing Sepal Length and Sepal Width by Species"
  ) +
  theme_bw()

```

Notice that the x-axes are the same for each group by default.  That is often how we want to visualize data.  Sometimes, though, we want to have each graph only cover the range of the data.  We can allow the x and y axes to accomodate different ranges of data by setting the "scales" parameter inside the facet_grid to "free":

```{r}

ggplot(iris, mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point() +
  facet_grid(~Species, scales = "free") +
  geom_smooth(method = "lm") +
  labs(
    x = "Sepal Length",
    y = "Sepal Width",
    title = "Comparing Sepal Length and Sepal Width by Species"
  ) +
  theme_bw()

```

## Conclusion

GGplot provides many options for easily making complex visualizations.  While there is far too much to cover in one class period, the basic framework is fairly intuitive once you get the hang of it.    

Notice that when we want to "add" something to a graph, we simply include a `+` and tell it what we want to add.  If we want to learn more about any of the graphing elements and their customization, we can always use the question mark help prompts (eg. `?facet_grid`).


# Examples

Let's look at a few more examples.

## Boxplot

When we want to compare the values of a quantitative variable for different groups, for example, we might be interested in a boxplot.

The grammar applies:

```{r}

ggplot(iris, mapping = aes(x = Species, y = Sepal.Length, fill = Species)) +
  geom_boxplot() +
  theme_bw() +
  labs(
    title = "Sepal Length by Species"
  )

```

## Histograms and Density Plots

When we want to look at the distribution of a single variable, we typically use histograms.  Because this is a single variable, we only define an x.

```{r}

ggplot(iris, mapping = aes(x = Sepal.Length)) +
  geom_histogram() +
  theme_bw() +
  labs(
    title = "Distribution of Sepal Length",
    x = "Sepal Length"
  )

# We can modify the number of bins in a histogram:  Play around with the "bin" Parameter

ggplot(iris, mapping = aes(x = Sepal.Length)) +
  geom_histogram(bins = 20) +
  theme_bw() +
  labs(
    title = "Distribution of Sepal Length",
    x = "Sepal Length"
  )

```

The above histogram includes data from all species.  We can distinguish species in several ways.  One is to color the bars by species.  Compare the difference between "color=Species" and "fill=Species" inside the aesthetic.

```{r}

ggplot(iris, mapping = aes(x = Sepal.Length, fill=Species)) +
  geom_histogram(bins = 20) +
  theme_bw() +
  labs(
    title = "Distribution of Sepal Length",
    x = "Sepal Length"
  )

```

It's not usually a good idea to layer histograms like this because it can obscure what is happening behind the covered layers.  This is a situation where faceting can be useful. 

Recall that by default the x-axis will be fixed to the same values for each facet.  We can let the x axis scale be different for each group by including `scales = "free"` into the facet_grid argument as above.  


```{r}
ggplot(iris, mapping = aes(x = Sepal.Length, fill = Species)) +
  geom_histogram(bins = 10) +
  facet_grid(~Species) +
  #facet_grid(~Species, scales = "free") +
  theme_bw() +
  labs(
    title = "Distribution of Sepal Length",
    x = "Sepal Length"
  )

```

### A Better Histogram

While histograms are a fine way to express the distribution of quantitative variables, it is not the only way.  A Density plot is a smooth version of a histogram.  Density plots use data to calculate a smooth line that expresses the quantitative variable as a continuous value rather than crude bins.

By making the smooth line, it is much easier to compare between groups.    


```{r}

ggplot(iris, mapping = aes(x = Sepal.Length, color = Species)) +
  geom_density(linewidth = 1.2) +
  theme_bw() +
  labs(
    title = "Distribution of Sepal Length",
    x = "Sepal Length"
  )

```



