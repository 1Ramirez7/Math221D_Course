---
title: group_by() + summarise()
format:
  html:
    self-contained: true
    embed-resources: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = TRUE)
```


# Summarizing Data

Consider the High School survey data with 60 columns and 312 respondents. 

```{r}
# Load libraries and data

library(rio)
library(mosaic)
library(tidyverse)
library(car)

survey <- import('https://github.com/byuistats/Math221D_Cannon/raw/master/Data/HighSchoolSeniors_subset.csv') %>% tibble()
```

The `mosaic` library is great for numerical summaries of quantitative variables using the `favstats()` function.  We can create tables of the 5 number summary, mean, standard deviation, sample size, and number of missing values with one line of code:

```{r}
favstats(survey$Height_cm)
```

We can add a grouping variable to get the same summary for each level of a group, using `~`

```{r}
favstats(survey$Height_cm ~ survey$Gender)
```

This works great if you want to do one response/dependent variable at a time.  But we often want specific summaries of data (often by groups) of more than one variable in the dataset.  

We can use a combination of tidyverse functions, `group_by()` and `summarise()` to create custom summary tables.

The `group_by()` signals to R that whatever follows should be done for each level of the column(s) identified inside the parentheses.  We can then "pipe" the grouped dataset into a summarize function and define what summary statistics we would like.  `summarise()` works very much like the [mutate()](../3-Data_Wrangling_Visualization/Bonus_Mutate.qmd) function in that we create a name for our summary and tell R how to make it.  

__EXAMPLE__:  Let's calculate the means for Height_cm, Reaction_time, and Social_Websites_Hours for Males and Females:

```{r}

clean <- survey %>%
  group_by(Gender) %>%
  summarise(
    mean_height = mean(Height_cm, na.rm=TRUE),
    mean_react_time = mean(Reaction_time, na.rm=TRUE),
    mean_social_media_hrs = mean(Social_Websites_Hours, na.rm=TRUE)
  )

clean

```

__Pro Tip__: Recall that the `mean()` function returns "NA" when there are missing values in the data. Adding `na.rm=TRUE` to your functions will make sure that you get a mean value.  

__EXAMPLE__:  Let's do the same means but for handedness:

```{r}

clean <- survey %>%
  group_by(Handed) %>%
  summarise(
    mean_height = mean(Height_cm, na.rm=TRUE),
    mean_react_time = mean(Reaction_time, na.rm=TRUE),
    mean_social_media_hrs = mean(Social_Websites_Hours, na.rm=TRUE)
  )

clean

```




<div class="QuestionsHeading">Combining Tidy Functions</div>
<div class="Questions">

1. Click to see how to [filter](../3-Data_Wrangling_Visualization/02-Filter.qmd) outliers for reaction times (reaction times greater than 1 second), and height outliers (taller than 7 feet tall), and social media hours (more than 100 hours).  

<details>
<summary>Click to see</summary>

```{r}
clean <- survey %>%
  filter(Height_cm < 214,
         Reaction_time < 1,
         Social_Websites_Hours < 100) %>%
  select(Gender, Height_cm, Reaction_time, Social_Websites_Hours)

# Pipe the new clean dataset into the group_by() and summarise() as above:

clean %>%
  group_by(Gender) %>%
  summarise(
    mean_height = mean(Height_cm, na.rm=TRUE),
    sd_ht = sd(Height_cm, na.rm=TRUE),
    mean_react_time = mean(Reaction_time, na.rm=TRUE),
    sd_react_time = sd(Reaction_time, na.rm=TRUE),
    mean_social_media_hrs = mean(Social_Websites_Hours, na.rm=TRUE),
    sd_social_hrs = sd(Social_Websites_Hours, na.rm=TRUE)
  )

```

</details>

</div>

# Grouping by Multiple Variables

It is simple to get summary statistics for multiple grouping factors.  

__EXAMPLE__:  Suppose we want the same means calculated above, but for gender and handedness: 

```{r}
clean <- survey %>%
  group_by(Gender, Handed) %>%
  summarise(
    mean_height = mean(Height_cm, na.rm=TRUE),
    mean_react_time = mean(Reaction_time, na.rm=TRUE),
    mean_social_media_hrs = mean(Social_Websites_Hours, na.rm=TRUE)
  )

clean
```

I can also use the `n()` function without any inputs to count the number of observations in each group:  

```{r}
clean <- survey %>%
  group_by(Gender, Handed) %>%
  summarise(
    mean_height = mean(Height_cm, na.rm=TRUE),
    mean_react_time = mean(Reaction_time, na.rm=TRUE),
    mean_social_media_hrs = mean(Social_Websites_Hours, na.rm=TRUE),
    N = n()
  )

clean
```

This shows me that there are only 3 female ambidextrous students in the sample and 6 male ambidextrous students.  
